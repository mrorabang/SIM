import { HUGGINGFACE_CONFIG, createRequestBody, processResponse } from "../config/huggingface";

/**
 * Service ƒë·ªÉ g·ªçi Hugging Face Inference API
 */
export class HuggingFaceService {
    constructor(model = HUGGINGFACE_CONFIG.DEFAULT_MODEL) {
        this.model = model;
        this.apiUrl = `${HUGGINGFACE_CONFIG.API_URL}/${model}`;
    }

    /**
     * G·ª≠i tin nh·∫Øn ƒë·∫øn Hugging Face API
     * @param {string} message - Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
     * @param {string} conversationHistory - L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán (optional)
     * @returns {Promise<string>} - Ph·∫£n h·ªìi t·ª´ AI
     */
    async sendMessage(message, conversationHistory = "") {
        try {
            // T·∫°o context t·ª´ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
            const context = conversationHistory ? 
                `${conversationHistory}\nUser: ${message}\nAI:` : 
                `User: ${message}\nAI:`;

            const requestBody = createRequestBody(context, this.model);

            console.log("ü§ñ G·ª≠i request ƒë·∫øn Hugging Face:", {
                model: this.model,
                message: message,
                context: context.substring(0, 100) + "..."
            });

            const response = await fetch(this.apiUrl, {
                method: "POST",
                headers: HUGGINGFACE_CONFIG.HEADERS,
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorText = await response.text();
                console.error("‚ùå L·ªói Hugging Face API:", response.status, errorText);
                
                // X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
                if (response.status === 503) {
                    return "Model ƒëang ƒë∆∞·ª£c t·∫£i, vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y...";
                } else if (response.status === 429) {
                    return "Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau...";
                } else if (response.status === 401) {
                    return "L·ªói x√°c th·ª±c API. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.";
                } else {
                    return `L·ªói API: ${response.status}. Vui l√≤ng th·ª≠ l·∫°i.`;
                }
            }

            const data = await response.json();
            console.log("‚úÖ Response t·ª´ Hugging Face:", data);

            const aiResponse = processResponse(data);
            
            // L√†m s·∫°ch response
            return this.cleanResponse(aiResponse);

        } catch (error) {
            console.error("‚ùå L·ªói khi g·ªçi Hugging Face API:", error);
            return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn AI. Vui l√≤ng th·ª≠ l·∫°i.";
        }
    }

    /**
     * L√†m s·∫°ch response t·ª´ AI
     * @param {string} response - Response th√¥ t·ª´ AI
     * @returns {string} - Response ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
     */
    cleanResponse(response) {
        if (!response) return "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi.";

        // Lo·∫°i b·ªè c√°c ph·∫ßn kh√¥ng c·∫ßn thi·∫øt
        let cleaned = response
            .replace(/User:.*?AI:/g, "") // Lo·∫°i b·ªè context c≈©
            .replace(/^AI:\s*/g, "") // Lo·∫°i b·ªè prefix "AI:"
            .replace(/\n+/g, " ") // Thay th·∫ø nhi·ªÅu newline b·∫±ng space
            .trim();

        // N·∫øu response qu√° ng·∫Øn ho·∫∑c kh√¥ng c√≥ √Ω nghƒ©a
        if (cleaned.length < 3) {
            return "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i kh√¥ng?";
        }

        // Gi·ªõi h·∫°n ƒë·ªô d√†i response
        if (cleaned.length > 500) {
            cleaned = cleaned.substring(0, 500) + "...";
        }

        return cleaned;
    }

    /**
     * Thay ƒë·ªïi model
     * @param {string} newModel - T√™n model m·ªõi
     */
    setModel(newModel) {
        this.model = newModel;
        this.apiUrl = `${HUGGINGFACE_CONFIG.API_URL}/${newModel}`;
        console.log("üîÑ ƒê√£ chuy·ªÉn sang model:", newModel);
    }

    /**
     * L·∫•y danh s√°ch models c√≥ s·∫µn
     * @returns {Object} - Danh s√°ch models
     */
    getAvailableModels() {
        return HUGGINGFACE_CONFIG.MODELS;
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i model
     * @returns {Promise<boolean>} - Model c√≥ s·∫µn kh√¥ng
     */
    async checkModelStatus() {
        try {
            const response = await fetch(this.apiUrl, {
                method: "GET",
                headers: HUGGINGFACE_CONFIG.HEADERS
            });
            return response.ok;
        } catch (error) {
            console.error("‚ùå L·ªói ki·ªÉm tra model:", error);
            return false;
        }
    }
}

// Export instance m·∫∑c ƒë·ªãnh
export const huggingFaceService = new HuggingFaceService();

// Export c√°c helper functions
export const switchModel = (model) => {
    huggingFaceService.setModel(model);
};

export const getAvailableModels = () => {
    return huggingFaceService.getAvailableModels();
};

export const checkModelStatus = async () => {
    return await huggingFaceService.checkModelStatus();
};
